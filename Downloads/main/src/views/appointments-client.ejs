<!DOCTYPE html>
<html>
<head>
    <title>Mes Rendez-vous</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .appointment-card {
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .status-pending { color: #ffc107; }
        .status-accepted { color: #28a745; }
        .status-rejected { color: #dc3545; }
        .status-cancelled { color: #6c757d; }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h2>Mes Rendez-vous</h2>
        
        <!-- Formulaire de prise de rendez-vous -->
        <div class="card mb-4">
            <div class="card-header">
                <h4>Prendre un rendez-vous</h4>
            </div>
            <div class="card-body">
                <form id="appointmentForm">
                    <div class="mb-3">
                        <label for="professional" class="form-label">Professionnel</label>
                        <select class="form-select" id="professional" required>
                            <% professionals.forEach(function(professional) { %>
                                <option value="<%= professional._id %>">
                                    <%= professional.firstName %> <%= professional.lastName %>
                                </option>
                            <% }); %>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="date" class="form-label">Date</label>
                        <input type="date" class="form-control" id="date" required>
                    </div>
                    <div class="mb-3">
                        <label for="time" class="form-label">Heure</label>
                        <input type="time" class="form-control" id="time" required>
                    </div>
                    <div class="mb-3">
                        <label for="reason" class="form-label">Motif</label>
                        <textarea class="form-control" id="reason" rows="3" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Prendre rendez-vous</button>
                </form>
            </div>
        </div>

        <!-- Liste des rendez-vous -->
        <h3>Mes rendez-vous programmés</h3>
        <div id="appointmentsList" class="row">
            <!-- Les rendez-vous seront ajoutés ici dynamiquement -->
        </div>
    </div>

    <script>
        // Fonction pour formater la date
        function formatDate(dateString) {
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            return new Date(dateString).toLocaleDateString('fr-FR', options);
        }

        // Fonction pour charger les rendez-vous
        async function loadAppointments() {
            try {
                const response = await fetch('/api/appointments/my-appointments', {
                    credentials: 'include'
                });
                const appointments = await response.json();
                
                const appointmentsList = document.getElementById('appointmentsList');
                appointmentsList.innerHTML = '';

                appointments.forEach(appointment => {
                    const statusClass = `status-${appointment.status}`;
                    const card = `
                        <div class="col-md-6 mb-3">
                            <div class="card appointment-card">
                                <div class="card-body">
                                    <h5 class="card-title">Rendez-vous avec ${appointment.professional.firstName} ${appointment.professional.lastName}</h5>
                                    <p class="card-text">
                                        <strong>Date:</strong> ${formatDate(appointment.date)}<br>
                                        <strong>Heure:</strong> ${appointment.time}<br>
                                        <strong>Motif:</strong> ${appointment.reason}<br>
                                        <strong>Statut:</strong> <span class="${statusClass}">
                                            ${appointment.status === 'pending' ? 'En attente' :
                                              appointment.status === 'accepted' ? 'Accepté' :
                                              appointment.status === 'rejected' ? 'Refusé' : 'Annulé'}
                                        </span>
                                    </p>
                                    ${appointment.status === 'pending' ? `
                                        <button class="btn btn-danger btn-sm" onclick="cancelAppointment('${appointment._id}')">
                                            Annuler
                                        </button>
                                    ` : ''}
                                </div>
                            </div>
                        </div>
                    `;
                    appointmentsList.innerHTML += card;
                });
            } catch (error) {
                console.error('Erreur lors du chargement des rendez-vous:', error);
                alert('Erreur lors du chargement des rendez-vous');
            }
        }

        // Fonction pour annuler un rendez-vous
        async function cancelAppointment(id) {
            if (!confirm('Êtes-vous sûr de vouloir annuler ce rendez-vous ?')) {
                return;
            }

            try {
                const response = await fetch(`/api/appointments/${id}`, {
                    method: 'DELETE',
                    credentials: 'include'
                });

                if (response.ok) {
                    alert('Rendez-vous annulé avec succès');
                    loadAppointments();
                } else {
                    const data = await response.json();
                    alert(data.message || 'Erreur lors de l\'annulation du rendez-vous');
                }
            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur lors de l\'annulation du rendez-vous');
            }
        }

        // Gérer la soumission du formulaire
        document.getElementById('appointmentForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = {
                professionalId: document.getElementById('professional').value,
                date: document.getElementById('date').value,
                time: document.getElementById('time').value,
                reason: document.getElementById('reason').value
            };

            try {
                const response = await fetch('/api/appointments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (response.ok) {
                    alert('Rendez-vous créé avec succès');
                    document.getElementById('appointmentForm').reset();
                    loadAppointments();
                } else {
                    alert(data.message || 'Erreur lors de la création du rendez-vous');
                }
            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur lors de la création du rendez-vous');
            }
        });

        // Charger les rendez-vous au chargement de la page
        document.addEventListener('DOMContentLoaded', loadAppointments);
    </script>
</body>
</html>
