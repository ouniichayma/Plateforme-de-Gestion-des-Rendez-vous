<div class="appointments-container">
    <h2>Gestion de mon Agenda</h2>

    <div class="availability-section">
        <h3>Mes Disponibilités</h3>
        <form id="availabilityForm" class="availability-form">
            <div class="form-group">
                <label for="date">Date :</label>
                <input type="date" id="date" name="date" required min="<%= new Date().toISOString().split('T')[0] %>">
            </div>

            <div class="form-group">
                <label>Heures disponibles :</label>
                <div class="time-slots">
                    <div class="time-slot">
                        <input type="checkbox" id="time-09" name="times[]" value="09:00">
                        <label for="time-09">09:00</label>
                    </div>
                    <div class="time-slot">
                        <input type="checkbox" id="time-10" name="times[]" value="10:00">
                        <label for="time-10">10:00</label>
                    </div>
                    <div class="time-slot">
                        <input type="checkbox" id="time-11" name="times[]" value="11:00">
                        <label for="time-11">11:00</label>
                    </div>
                    <div class="time-slot">
                        <input type="checkbox" id="time-14" name="times[]" value="14:00">
                        <label for="time-14">14:00</label>
                    </div>
                    <div class="time-slot">
                        <input type="checkbox" id="time-15" name="times[]" value="15:00">
                        <label for="time-15">15:00</label>
                    </div>
                    <div class="time-slot">
                        <input type="checkbox" id="time-16" name="times[]" value="16:00">
                        <label for="time-16">16:00</label>
                    </div>
                </div>
            </div>

            <button type="submit" class="btn-primary">Enregistrer les disponibilités</button>
        </form>
    </div>

    <div class="appointments-list">
        <h3>Mes Rendez-vous</h3>
        <div id="appointmentsList">
            <!-- Les rendez-vous seront chargés ici dynamiquement -->
        </div>
    </div>
</div>

<style>
    .appointments-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .availability-section {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
    }

    .availability-form {
        max-width: 600px;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: bold;
    }

    .time-slots {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        gap: 1rem;
        margin-top: 0.5rem;
    }

    .time-slot {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .time-slot input[type="checkbox"] {
        width: auto;
    }

    .form-group input {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
    }

    .btn-primary {
        background-color: #4CAF50;
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
        width: 100%;
    }

    .btn-primary:hover {
        background-color: #45a049;
    }

    .appointments-list {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .appointment-card {
        border: 1px solid #ddd;
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 4px;
    }

    .appointment-card h4 {
        margin: 0 0 0.5rem 0;
    }

    .appointment-actions {
        margin-top: 1rem;
        display: flex;
        gap: 0.5rem;
    }

    .btn-accept,
    .btn-reject {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        color: white;
    }

    .btn-accept {
        background-color: #28a745;
    }

    .btn-reject {
        background-color: #dc3545;
    }

    .btn-accept:hover {
        background-color: #218838;
    }

    .btn-reject:hover {
        background-color: #c82333;
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const availabilityForm = document.getElementById('availabilityForm');
    
    // Gestionnaire pour le formulaire de disponibilités
    if (availabilityForm) {
        availabilityForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const selectedTimes = Array.from(document.querySelectorAll('input[name="times[]"]:checked'))
                .map(checkbox => checkbox.value);

            const formData = {
                date: document.getElementById('date').value,
                times: selectedTimes
            };

            try {
                const response = await fetch('/api/appointments/availability', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (response.ok) {
                    alert('Disponibilités enregistrées avec succès !');
                } else {
                    alert(result.message || 'Erreur lors de l\'enregistrement des disponibilités');
                }
            } catch (error) {
                console.error('Erreur:', error);
                alert('Une erreur est survenue lors de l\'enregistrement des disponibilités');
            }
        });
    }

    // Fonction pour charger les rendez-vous
    async function loadAppointments() {
        try {
            const response = await fetch('/api/appointments/professional-appointments');
            const appointments = await response.json();
            
            const appointmentsList = document.getElementById('appointmentsList');
            
            if (appointments.length === 0) {
                appointmentsList.innerHTML = '<p>Aucun rendez-vous</p>';
                return;
            }

            appointmentsList.innerHTML = appointments.map(appointment => `
                <div class="appointment-card">
                    <h4>Rendez-vous le ${new Date(appointment.date).toLocaleDateString()} à ${appointment.time}</h4>
                    <p><strong>Client:</strong> ${appointment.client.firstName} ${appointment.client.lastName}</p>
                    <p><strong>Motif:</strong> ${appointment.reason}</p>
                    <p><strong>Statut:</strong> ${appointment.status}</p>
                    ${appointment.status === 'pending' ? `
                        <div class="appointment-actions">
                            <button onclick="handleAppointment('${appointment._id}', 'accept')" class="btn-accept">
                                Accepter
                            </button>
                            <button onclick="handleAppointment('${appointment._id}', 'reject')" class="btn-reject">
                                Refuser
                            </button>
                        </div>
                    ` : ''}
                </div>
            `).join('');
        } catch (error) {
            console.error('Erreur lors du chargement des rendez-vous:', error);
        }
    }

    // Fonction pour gérer les rendez-vous (accepter/refuser)
    window.handleAppointment = async function(appointmentId, action) {
        try {
            const response = await fetch(`/api/appointments/${appointmentId}/${action}`, {
                method: 'PUT'
            });

            if (response.ok) {
                alert(`Rendez-vous ${action === 'accept' ? 'accepté' : 'refusé'} avec succès`);
                loadAppointments();
            } else {
                const result = await response.json();
                alert(result.message || `Erreur lors de l'${action === 'accept' ? 'acceptation' : 'refus'} du rendez-vous`);
            }
        } catch (error) {
            console.error('Erreur:', error);
            alert('Une erreur est survenue');
        }
    }

    // Charger les rendez-vous au chargement de la page
    loadAppointments();
});
</script>