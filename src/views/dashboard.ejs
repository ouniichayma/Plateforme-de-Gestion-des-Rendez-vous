<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tableau de Bord - Cabinet Dentaire</title>
    <!-- FullCalendar CSS -->
    <link href='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.css' rel='stylesheet' />
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Police Google pour un style moderne -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Font Awesome pour les icônes -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <!-- Styles personnalisés -->
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f8f9fa;
            color: #333;
        }

        .dashboard {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 1rem;
        }

        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(135deg, #007bff, #00bcd4);
            padding: 1rem 2rem;
            border-radius: 12px;
            color: white;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .dashboard-header h2 {
            margin: 0;
            font-weight: 600;
        }

        .user-profile {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .profile-image {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid white;
        }

        .btn-logout {
            background-color: #3066fa;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s;
        }

        .btn-logout:hover {
            background-color: #ff6b81;
        }

        .user-info {
            text-align: center;
            margin: 2rem 0;
            padding: 2rem;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .user-info h3 {
            color: #007bff;
            font-weight: 600;
        }

        .user-info p {
            color: #666;
        }

        .dashboard-actions {
            display: grid;
            gap: 2rem;
            padding: 2rem;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .action-buttons {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }

        .action-buttons button {
            width: 100%;
            padding: 1rem;
            background: linear-gradient(135deg, #007bff, #00bcd4);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .action-buttons button:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        #calendar {
            margin-top: 2rem;
            background: white;
            padding: 1rem;
            border-radius: 12px;
            box-shadow: 4 4px 6px rgba(0, 0, 0, 0.1);
            height: 1100px;
        }

        .fc-event {
            cursor: pointer;
            background: #d2e1f1;
            border: none;
            border-radius: 6px;
        }

        .fc-event-title {
            font-weight: bold;
        }

        .doctor-dentist-section {
            background: #e3f2fd;
            padding: 1rem;
            border-radius: 12px;
        }
























/*liste des users*/

        .users-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
}

.user-card {
    background: #f8f9fa;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
}

.user-card h4 {
    margin-bottom: 5px;
    font-size: 18px;
    color: #333;
}

.user-card p {
    margin-bottom: 10px;
    color: #666;
}

.user-card button {
    background: #007bff;
    color: white;
    border: none;
    padding: 8px 12px;
    margin: 5px;
    border-radius: 5px;
    cursor: pointer;
}

.user-card button:hover {
    background: #0056b3;
}


















/* Styles pour la modale */
.modal { display: none; position: fixed; left: 0; top: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); justify-content: center; align-items: center; }
.modal-content { background: white; padding: 20px; border-radius: 8px; width: 300px; text-align: center; }
.close { cursor: pointer; float: right; font-size: 24px; }






.modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
        padding-top: 60px;
    }

    .modal-content {
        background-color: #fff;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 500px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .close {
        color: #aaa;
        font-size: 28px;
        font-weight: bold;
        position: absolute;
        top: 10px;
        right: 20px;
    }

    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    fieldset {
        border: none;
        padding: 10px;
        margin: 20px 0;
    }

    legend {
        font-size: 1.2em;
        font-weight: bold;
        color: #333;
    }

    label {
        font-weight: bold;
        margin: 8px 0;
        display: block;
    }

    input[type="text"],
    input[type="email"] {
        width: 100%;
        padding: 10px;
        margin: 5px 0;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    input[type="text"]:focus,
    input[type="email"]:focus {
        border-color: #007bff;
        outline: none;
    }

    .form-actions {
        margin-top: 15px;
        text-align: right;
    }

    .form-actions button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        background-color: #007bff;
        color: white;
        cursor: pointer;
        margin-left: 10px;
    }

    .form-actions button.cancel {
        background-color: #ccc;
    }

    .form-actions button:hover {
        background-color: #0056b3;
    }

    .form-actions button.cancel:hover {
        background-color: #999;
    }


    </style>
</head>
<body>
    <div class="dashboard">
        <!-- En-tête du tableau de bord -->
        <header class="dashboard-header">
            <h2>Tableau de Bord - Cabinet Dentaire</h2>
         
            <div class="user-profile">
               
            
                <% if (user && user.image) { %>
                    <img src="<%=user.image %>" class="profile-image">

                    <%= console.log("Image de l'utilisateur :", user.image) %>
                <% } else { %>
                    <img src="/uploads/default-profile.jpg" class="profile-image">
                    <%= console.log("Image de l'utilisateur :", user.image) %>
                    <%= console.log("email de l'utilisateur :", user.email) %>
                    <%= console.log("lastName de l'utilisateur :", user.lastName) %>
                    <%= console.log("Utilisateur récupéré :", user); %>
                <% } %>
             
                <button onclick="handleLogout()" class="btn-logout">Déconnexion <i class="fas fa-sign-out-alt"></i></button>
            </div>
        </header>

        <!-- Informations de l'utilisateur -->
        <div class="user-info">
            <h3>Bienvenue,<%= user.firstName %> <%= user.lastName %></h3>
        
            <p>Rôle : <%= user.role %></p>
        </div>

        <!-- Actions du tableau de bord -->
        <div class="dashboard-actions">
            <% if (user.role === 'admin') { %>
                <div class="admin-section">
                    <h3 class="text-primary mb-4">Administration</h3>
                    <div class="action-buttons">
                        <button onclick="fetchUsers()">Gérer les utilisateurs</button>

                        <button onclick="window.location.href='/appointments'">Tous les rendez-vous</button>
                    </div>









                  
                    <div class="container">
                        <h3>Statistiques des Utilisateurs</h3>
                
                        <!-- Canvas pour afficher le graphique -->
                        <canvas id="userStatsChart" width="400" height="200"></canvas>
                    </div>






                    <div id="users-list" class="mt-4">
                       
                        <div id="users-container" class="users-grid">
                            <!-- Les utilisateurs seront ajoutés ici -->
                        </div>
                    </div>
                    
                    







                    <!-- Modale pour modifier l'utilisateur -->
<div id="editUserModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h2>Modifier l'utilisateur</h2>
        <form id="editUserForm">
            <label for="editFirstName">First Name :</label>
            <input type="text" id="editFirstName" name="firstName">
            <br>
            <label for="editLastName">Last Name :</label>
            <input type="text" id="editLastName" name="lastName">
            
            <br>
            <label for="editEmail">Email :</label>
            <input type="email" id="editEmail" name="email">
            <br>
            <label for="editRole">Rôle :</label>
            <input type="text" id="editRole" name="role">
            <br>
            <button type="button" onclick="saveUserChanges()">Enregistrer</button>
        </form>
    </div>
</div>




                </div>
            <% } %>

            <% if (user.role === 'professionnel') { %>
                <div class="pro-section">
                    <h3 class="text-primary mb-4">Mes rendez-vous</h3>
                    <div class="action-buttons">
                        <button onclick="window.location.href='/appointments'">Voir mon agenda</button>
                    
                    </div>

                    <div id="calendar"></div>
                   
                   
                </div>
            <% } %>

            <% if (user.role === 'client') { %>
                <div class="client-section">
                    <h3 class="text-primary mb-4">Mes rendez-vous</h3>
                    <div class="action-buttons mb-4">
                        <button onclick="window.location.href='/appointments'">Gérer mes rendez-vous</button>
                    </div>
                    <div id="calendar"></div>
                </div>
            <% } %>

         
        </div>
    </div>

<!-- FullCalendar JS -->
<script src='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js'></script>

<script>
async function handleLogout() {
    try {
        // Appeler l'API de déconnexion
        const response = await fetch('/api/auth/logout', {
            method: 'POST',
            credentials: 'include'
        });

        if (response.ok) {
            // Rediriger vers la page de connexion
            window.location.href = '/login';
        } else {
            console.error('Erreur lors de la déconnexion');
        }
    } catch (error) {
        console.error('Erreur:', error);
    }
}

document.addEventListener('DOMContentLoaded', function() {
    if (document.getElementById('calendar')) {
        initializeCalendar();
    }
});

async function initializeCalendar() {
    try {
        // Fetch appointments
        const response = await fetch('/api/appointments/my-appointments');
        const appointments = await response.json();

        const events = appointments.map(apt => ({
    id: apt._id,
    title: `Rendez-vous ${apt.status}`,
    start: new Date(apt.date),
    backgroundColor: getStatusColor(apt.status),
    extendedProps: {
        status: apt.status,
        description: apt.reason || 'Pas de description',
        clientName: apt.client 
            ? `${apt.client.firstName} ${apt.client.lastName}` 
            : 'Client inconnu' // Valeur par défaut si client est null
    }
}));
        // Initialize calendar
        const calendarEl = document.getElementById('calendar');
        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            locale: 'fr',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,dayGridWeek'
            },
            events: events,
            height: 'auto',
            eventClick: function(info) {
                showAppointmentDetails(info.event);
            }
        });

        calendar.render();
    } catch (error) {
        console.error('Error fetching appointments:', error);
    }
}

function getStatusColor(status) {
    const colors = {
        'pending': '#ffc107',
        'accepted': '#28a745',
        'rejected': '#dc3545',
        'cancelled': '#6c757d'
    };
    return colors[status] || '#007bff';
}

function showAppointmentDetails(event) {
    const props = event.extendedProps;
    alert(`
        Client: ${props.clientName}
        Status: ${props.status}
        Description: ${props.description}
        Date: ${event.start.toLocaleDateString('fr-FR')}
    `);
}





































async function fetchUsers() {
    try {
        const response = await fetch('/api/users/');
        const users = await response.json();

       


        const usersContainer = document.getElementById('users-container');
        usersContainer.innerHTML = ''; // Vider la liste avant d'ajouter les utilisateurs
      
     
       
        users.forEach(user => {
            const userCard = document.createElement('div');
            userCard.classList.add('user-card');

            userCard.innerHTML = `
                <h4>${user.firstName} ${user.lastName}</h4>
                <p><strong>Email:</strong> ${user.email}</p>
                <p><strong>Rôle:</strong> ${user.role}</p>
                <button onclick="editUser('${user._id}')">Modifier</button>
                <button onclick="deleteUser('${user._id}')" style="background: red;">Supprimer</button>
            `;

            usersContainer.appendChild(userCard);
        });
    } catch (error) {
        console.error('Erreur lors de la récupération des utilisateurs:', error);
    }
}




async function editUser(userId) {
    try {
        const response = await fetch(`/api/users/${userId}`);
        const user = await response.json();

        if (!user) {
            alert("Utilisateur introuvable !");
            return;
        }

        // Remplir le formulaire avec les données actuelles
        document.getElementById("editFirstName").value = user.firstName;
        document.getElementById("editLastName").value = user.lastName;
        document.getElementById("editEmail").value = user.email;
        document.getElementById("editRole").value = user.role;

        // Ajouter un attribut data-user-id pour récupérer l'ID au moment de la sauvegarde
        document.getElementById("editUserForm").setAttribute("data-user-id", userId);

        // Afficher la modale
        document.getElementById("editUserModal").style.display = "flex";
    } catch (error) {
        console.error("Erreur:", error);
    }
}







function closeModal() {
    document.getElementById("editUserModal").style.display = "none";
}

async function saveUserChanges() {
    const userId = document.getElementById("editUserForm").getAttribute("data-user-id");

    const updatedUser = {
        firstName: document.getElementById("editFirstName").value || '',
        lastName: document.getElementById("editLastName").value || '',
        email: document.getElementById("editEmail").value || '',
        role: document.getElementById("editRole").value || ''
    };

    try {
        const updateResponse = await fetch(`/api/users/${userId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updatedUser)
        });

        const data = await updateResponse.json();
        alert(data.message);
        closeModal();
        fetchUsers();
    } catch (error) {
        console.error("Erreur:", error);
    }
}





function deleteUser(userId) {
    if (confirm("Voulez-vous vraiment supprimer cet utilisateur ?")) {
        fetch(`/api/users/${userId}`, {
            method: "DELETE"
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message);
            fetchUsers(); // Rafraîchir la liste après suppression
        })
        .catch(error => console.error("Erreur:", error));
    }
}




















































</script>








<script>
    // Fonction pour charger les statistiques et afficher le graphique
    async function loadUserStats() {
        try {
            const response = await fetch('/api/users/stats');
            const stats = await response.json();

            // Récupération des données pour le graphique
            const data = {
                labels: ['Admin', 'Professionnels', 'Clients'],
                datasets: [{
                    label: 'Nombre d\'utilisateurs par rôle',
                    data: [stats.adminCount, stats.professionalCount, stats.clientCount],
                    backgroundColor: ['#FF5733', '#33FF57', '#3357FF'],
                    borderColor: ['#FF5733', '#33FF57', '#3357FF'],
                    borderWidth: 1
                }]
            };

            // Configuration du graphique
            const config = {
                type: 'bar', // Type de graphique (barres)
                data: data,
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            };

            // Créer et afficher le graphique
            const ctx = document.getElementById('userStatsChart').getContext('2d');
            new Chart(ctx, config);

        } catch (error) {
            console.error('Erreur lors du chargement des statistiques:', error);
        }
    }

    // Appeler la fonction pour charger les statistiques au chargement de la page
    loadUserStats();
</script>







<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


</body>
</html>